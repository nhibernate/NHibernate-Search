//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections;
using System.Collections.Generic;
using Lucene.Net.Analysis.Core;
using Lucene.Net.QueryParsers.Classic;
using NHibernate.Criterion;
using NUnit.Framework;

namespace NHibernate.Search.Tests.Query
{
    using System.Threading.Tasks;
    [TestFixture]
    public class LuceneQueryTestAsync : SearchTestCase
    {
        protected override IEnumerable<string> Mappings
        {
            get
            {
                return new string[]
                           {
                               "Query.Author.hbm.xml",
                               "Query.Book.hbm.xml",
                               "Query.AlternateBook.hbm.xml",
                               "Query.Clock.hbm.xml"
                           };
            }
        }

        #region Tests

        [Test]
        public async Task CriteriaAsync()
        {
            IFullTextSession s = Search.CreateFullTextSession(OpenSession());
            ITransaction tx = s.BeginTransaction();
            Book book = new Book(1, "La chute de la petite reine a travers les yeux de Festina", "La chute de la petite reine a travers les yeux de Festina, blahblah");
            await (s.SaveAsync(book));
            Author emmanuel = new Author();
            emmanuel.Name = "Emmanuel";
            await (s.SaveAsync(emmanuel));
            book.Authors.Add(emmanuel);
            await (tx.CommitAsync());
            s.Clear();

            tx = s.BeginTransaction();
            QueryParser parser = new QueryParser(Lucene.Net.Util.LuceneVersion.LUCENE_48, "Title", new StopAnalyzer(Lucene.Net.Util.LuceneVersion.LUCENE_48));

            Lucene.Net.Search.Query query = parser.Parse("Summary:Festina");
            IFullTextQuery hibQuery = s.CreateFullTextQuery(query, typeof(Book));
            IList result = await (hibQuery.ListAsync());
            Assert.NotNull(result);
            Assert.AreEqual(1, result.Count, "Query with no explicit criteria");
            book = (Book)result[0];
            //Assert.IsFalse(NHibernate.IsInitialized(book.Authors), "Association should not be initialized");

            result = await (s.CreateFullTextQuery(query).SetCriteriaQuery(s.CreateCriteria(typeof(Book)).Fetch(SelectMode.Fetch, "Authors")).ListAsync());
            Assert.NotNull(result);
            Assert.AreEqual(1, result.Count, "Query with no explicit criteria");
            book = (Book)result[0];
            //Assert.IsTrue(NHibernate.IsInitialized(book.Authors), "Association should be initialized");
            Assert.AreEqual(1, book.Authors.Count);

            // cleanup
            await (s.DeleteAsync("from System.Object"));
            await (tx.CommitAsync());
            s.Close();
        }

        [Test]
        public async Task UsingCriteriaApiAsync()
        {
            IFullTextSession s = Search.CreateFullTextSession(OpenSession());
            ITransaction tx = s.BeginTransaction();
            Clock clock = new Clock(1, "Seiko");
            await (s.SaveAsync(clock));
            await (tx.CommitAsync());

            IList list = await (s.CreateFullTextQuery<Clock>("Brand:seiko")
                .SetCriteriaQuery(s.CreateCriteria(typeof(Clock)).Add(Restrictions.IdEq(1)))
                .ListAsync());
            Assert.AreEqual(1, list.Count, "should get result back from query");

            await (s.DeleteAsync(clock));
            await (s.FlushAsync());
            s.Close();
        }

        #endregion

        #region Helper methods
        #endregion
    }
}