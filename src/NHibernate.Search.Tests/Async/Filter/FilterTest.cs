//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using Lucene.Net.Analysis.Standard;
using Lucene.Net.Index;
using Lucene.Net.QueryParsers.Classic;
using Lucene.Net.Search;
using NUnit.Framework;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using Lucene.Net.Util;

namespace NHibernate.Search.Tests.Filter
{
    using System.Threading.Tasks;
    using System.Threading;
    [TestFixture]
    public class FilterTestAsync : SearchTestCase
    {
        protected override IEnumerable<string> Mappings
        {
            get { return new string[] { "Filter.Driver.hbm.xml" }; }
        }

        private delegate void Method();

        #region Tests

        //// Broke out NamedFilters into multiple tests as it was trying to do too much in one fixture.

        [Test]
        public async Task ParameterizedFilterAsync()
        {
            try
            {
                await (CreateDataAsync());
                using (var s = Search.CreateFullTextSession(OpenSession()))
                using (var t = s.BeginTransaction())
                {
                    BooleanQuery query = new BooleanQuery();
                    query.Add(new TermQuery(new Term("teacher", "andre")), Occur.SHOULD);
                    query.Add(new TermQuery(new Term("teacher", "max")), Occur.SHOULD);
                    query.Add(new TermQuery(new Term("teacher", "aaron")), Occur.SHOULD);

                    IFullTextQuery ftQuery = s.CreateFullTextQuery(query, typeof(Driver));
                    ftQuery.EnableFullTextFilter("security").SetParameter("Login", "andre");
                    Assert.AreEqual(1, ftQuery.ResultSize, "Should filter to limit to Emmanuel");

                    await (t.CommitAsync());
                    s.Close();
                }
            }
            finally
            {
                await (DeleteDataAsync());
            }
        }

        [Test]
        public async Task ParameterizedFilterWithSearchQueryAsync()
        {
            try
            {
                const string n = "NoMatch";
                const string y = "Match";

                using (var session = OpenSession())
                using (var t = session.BeginTransaction())
                {
                    var deliveryDate = new DateTime(2000, 1, 1);
                    await (saveNewDriverAsync(session, 1, n, n, deliveryDate, -1));
                    await (saveNewDriverAsync(session, 2, y, y, deliveryDate, -1));
                    await (saveNewDriverAsync(session, 3, y, y, deliveryDate, -1));
                    await (saveNewDriverAsync(session, 4, n, n, deliveryDate, -1));
                    await (saveNewDriverAsync(session, 5, y, y, deliveryDate, -1));
                    await (saveNewDriverAsync(session, 6, n, y, deliveryDate, -1));
                    await (saveNewDriverAsync(session, 7, n, n, deliveryDate, -1));
                    await (saveNewDriverAsync(session, 8, y, n, deliveryDate, -1));
                    await (saveNewDriverAsync(session, 9, y, y, deliveryDate, -1));
                    await (saveNewDriverAsync(session, 10, n, n, deliveryDate, -1));
                    await (saveNewDriverAsync(session, 11, y, y, deliveryDate, -1));
                    await (saveNewDriverAsync(session, 12, n, n, deliveryDate, -1));
                    await (saveNewDriverAsync(session, 13, n, n, deliveryDate, -1));
                    await (saveNewDriverAsync(session, 14, n, y, deliveryDate, -1));
                    await (saveNewDriverAsync(session, 15, y, n, deliveryDate, -1));
                    await (t.CommitAsync());
                }

                using (var session = OpenSession())
                using (var ftSession = Search.CreateFullTextSession(session))
                {
                    var parser = new QueryParser(LuceneVersion.LUCENE_48, "name", new StandardAnalyzer(LuceneVersion.LUCENE_48));
                    var query = parser.Parse("name:" + y);
                    var ftQuery = ftSession.CreateFullTextQuery(query, typeof(Driver));
                    ftQuery.EnableFullTextFilter("security").SetParameter("Login", y);
                    var results = await (ftQuery.ListAsync());

                    var expectedIds = new[] { 2, 3, 5, 9, 11 };
                    var actualIds = results.Cast<Driver>().OrderBy(x => x.Id).Select(x => x.Id);
                    Assert.AreEqual(expectedIds, actualIds, "The query should return only drivers where name AND teacher match.");
                }
            }
            finally
            {
                await (DeleteDataAsync());
            }
        }

        #endregion

        #region Helper methods

        private async Task DeleteDataAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            ISession s = OpenSession();
            var t = s.BeginTransaction();
            await (s.CreateQuery("delete Driver").ExecuteUpdateAsync(cancellationToken));
            Search.CreateFullTextSession(s).PurgeAll(typeof(Driver));
            await (t.CommitAsync(cancellationToken));
            s.Close();
        }

        private async Task CreateDataAsync(CancellationToken cancellationToken = default(CancellationToken))
        {
            ISession s = OpenSession();
            var t = s.BeginTransaction();
            Driver driver = new Driver();
            driver.Delivery = new DateTime(2006, 10, 11);
            driver.Id = 1;
            driver.Name = "Emmanuel";
            driver.Score = 5;
            driver.Teacher = "andre";
            await (s.SaveAsync(driver, cancellationToken));

            driver = new Driver();
            driver.Delivery = new DateTime(2007, 10, 11);
            driver.Id = 2;
            driver.Name = "Gavin";
            driver.Score = 3;
            driver.Teacher = "aaron";
            await (s.SaveAsync(driver, cancellationToken));

            driver = new Driver();
            driver.Delivery = new DateTime(2004, 10, 11);
            driver.Id = 3;
            driver.Name = "Liz";
            driver.Score = 5;
            driver.Teacher = "max";
            await (s.SaveAsync(driver, cancellationToken));
            await (t.CommitAsync(cancellationToken));
            s.Close();
        }

        private static Task saveNewDriverAsync(ISession session, int id, string name, string teacher, DateTime delivery, int score, CancellationToken cancellationToken = default(CancellationToken))
        {
            try
            {
                var driver = new Driver
                {
                    Id = id,
                    Name = name,
                    Teacher = teacher,
                    Delivery = delivery,
                    Score = score
                };
                return session.SaveAsync(driver, cancellationToken);
            }
            catch (Exception ex)
            {
                return Task.FromException<object>(ex);
            }
        }

        #endregion
    }
}