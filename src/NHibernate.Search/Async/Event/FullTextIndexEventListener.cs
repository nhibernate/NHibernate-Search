//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using NHibernate.Cfg;
using NHibernate.Event;
using NHibernate.Search.Backend;
using NHibernate.Search.Engine;
using NHibernate.Search.Impl;

namespace NHibernate.Search.Event
{
    using System.Threading.Tasks;
    using System.Threading;
    public partial class FullTextIndexEventListener : IPostDeleteEventListener, IPostInsertEventListener,
                                              IPostUpdateEventListener,
                                              IInitializable,
                                              IDestructible
    {

        #region Property methods

        #endregion
        #region Public methods

        public virtual Task OnPostDeleteAsync(PostDeleteEvent e, CancellationToken cancellationToken)
        {
            if (cancellationToken.IsCancellationRequested)
            {
                return Task.FromCanceled<object>(cancellationToken);
            }
            try
            {
                OnPostDelete(e);
                return Task.CompletedTask;
            }
            catch (Exception ex)
            {
                return Task.FromException<object>(ex);
            }
        }

        public virtual Task OnPostInsertAsync(PostInsertEvent e, CancellationToken cancellationToken)
        {
            if (cancellationToken.IsCancellationRequested)
            {
                return Task.FromCanceled<object>(cancellationToken);
            }
            try
            {
                OnPostInsert(e);
                return Task.CompletedTask;
            }
            catch (Exception ex)
            {
                return Task.FromException<object>(ex);
            }
        }

        public virtual Task OnPostUpdateAsync(PostUpdateEvent e, CancellationToken cancellationToken)
        {
            if (cancellationToken.IsCancellationRequested)
            {
                return Task.FromCanceled<object>(cancellationToken);
            }
            try
            {
                OnPostUpdate(e);
                return Task.CompletedTask;
            }
            catch (Exception ex)
            {
                return Task.FromException<object>(ex);
            }
        }

        #endregion
        #region Protected methods

        #endregion
        #region Protected methods

        #endregion
    }
}