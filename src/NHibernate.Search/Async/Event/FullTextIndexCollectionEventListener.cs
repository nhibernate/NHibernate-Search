//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by AsyncGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace NHibernate.Search.Event
{
    using Backend;

    using NHibernate.Engine;
    using NHibernate.Event;
    using System.Threading.Tasks;
    using System.Threading;

    public partial class FullTextIndexCollectionEventListener : FullTextIndexEventListener,
                                    IPostCollectionRecreateEventListener, IPostCollectionRemoveEventListener, IPostCollectionUpdateEventListener
    {

        #region Public methods

        public Task OnPostRecreateCollectionAsync(PostCollectionRecreateEvent @event, CancellationToken cancellationToken)
        {
            if (cancellationToken.IsCancellationRequested)
            {
                return Task.FromCanceled<object>(cancellationToken);
            }
            try
            {
                OnPostRecreateCollection(@event);
                return Task.CompletedTask;
            }
            catch (System.Exception ex)
            {
                return Task.FromException<object>(ex);
            }
        }

        public Task OnPostRemoveCollectionAsync(PostCollectionRemoveEvent @event, CancellationToken cancellationToken)
        {
            if (cancellationToken.IsCancellationRequested)
            {
                return Task.FromCanceled<object>(cancellationToken);
            }
            try
            {
                OnPostRemoveCollection(@event);
                return Task.CompletedTask;
            }
            catch (System.Exception ex)
            {
                return Task.FromException<object>(ex);
            }
        }

        public Task OnPostUpdateCollectionAsync(PostCollectionUpdateEvent @event, CancellationToken cancellationToken)
        {
            if (cancellationToken.IsCancellationRequested)
            {
                return Task.FromCanceled<object>(cancellationToken);
            }
            try
            {
                OnPostUpdateCollection(@event);
                return Task.CompletedTask;
            }
            catch (System.Exception ex)
            {
                return Task.FromException<object>(ex);
            }
        }

        #endregion
        #region Private methods

        #endregion
    }
}